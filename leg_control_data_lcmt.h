// Generated by gencpp from file lcm_to_ros/leg_control_data_lcmt.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_LEG_CONTROL_DATA_LCMT_H
#define LCM_TO_ROS_MESSAGE_LEG_CONTROL_DATA_LCMT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct leg_control_data_lcmt_
{
  typedef leg_control_data_lcmt_<ContainerAllocator> Type;

  leg_control_data_lcmt_()
    : q()
    , qd()
    , p()
    , v()
    , tau_est()  {
      q.assign(0.0);

      qd.assign(0.0);

      p.assign(0.0);

      v.assign(0.0);

      tau_est.assign(0.0);
  }
  leg_control_data_lcmt_(const ContainerAllocator& _alloc)
    : q()
    , qd()
    , p()
    , v()
    , tau_est()  {
  (void)_alloc;
      q.assign(0.0);

      qd.assign(0.0);

      p.assign(0.0);

      v.assign(0.0);

      tau_est.assign(0.0);
  }



   typedef boost::array<float, 12>  _q_type;
  _q_type q;

   typedef boost::array<float, 12>  _qd_type;
  _qd_type qd;

   typedef boost::array<float, 12>  _p_type;
  _p_type p;

   typedef boost::array<float, 12>  _v_type;
  _v_type v;

   typedef boost::array<float, 12>  _tau_est_type;
  _tau_est_type tau_est;





  typedef boost::shared_ptr< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> const> ConstPtr;

}; // struct leg_control_data_lcmt_

typedef ::lcm_to_ros::leg_control_data_lcmt_<std::allocator<void> > leg_control_data_lcmt;

typedef boost::shared_ptr< ::lcm_to_ros::leg_control_data_lcmt > leg_control_data_lcmtPtr;
typedef boost::shared_ptr< ::lcm_to_ros::leg_control_data_lcmt const> leg_control_data_lcmtConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/chaonew/catkin_ws/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c011d539f9cd3846daa8136af77ac9d";
  }

  static const char* value(const ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c011d539f9cd384ULL;
  static const uint64_t static_value2 = 0x6daa8136af77ac9dULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/leg_control_data_lcmt";
  }

  static const char* value(const ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          Thu 16 Jul 2020 12:36:37 PM EDT\n\
#\n\
#######################################################################\n\
float32[12]         q\n\
float32[12]         qd\n\
float32[12]         p\n\
float32[12]         v\n\
float32[12]         tau_est\n\
";
  }

  static const char* value(const ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q);
      stream.next(m.qd);
      stream.next(m.p);
      stream.next(m.v);
      stream.next(m.tau_est);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct leg_control_data_lcmt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::leg_control_data_lcmt_<ContainerAllocator>& v)
  {
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "qd[]" << std::endl;
    for (size_t i = 0; i < v.qd.size(); ++i)
    {
      s << indent << "  qd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.qd[i]);
    }
    s << indent << "p[]" << std::endl;
    for (size_t i = 0; i < v.p.size(); ++i)
    {
      s << indent << "  p[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.p[i]);
    }
    s << indent << "v[]" << std::endl;
    for (size_t i = 0; i < v.v.size(); ++i)
    {
      s << indent << "  v[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.v[i]);
    }
    s << indent << "tau_est[]" << std::endl;
    for (size_t i = 0; i < v.tau_est.size(); ++i)
    {
      s << indent << "  tau_est[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tau_est[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_LEG_CONTROL_DATA_LCMT_H
